=============
SIGACTION
=============
It can catch a signal and reply it with a function instead default one.
You should use it like sigaction (int signal, struct sigaction *act, struct sigaction *old_act)

The different signals are:
 - SIGHUP (1) who hang up the process
 - SIGINT (2) who interupt the process
 - SIGQUIT (3) Who quit the program
 - SIGILL (4) it's illegal instruction
 - SIGTRAP (5) Trace a trap
 - SIGABRT (6) Abort process

For a basic uses, you should do something like

int main(void)
{
	struct sigaction	sa;

	sigempyset(&sa.sa_mask);
	sa.sa_handler = print_end_message;
	sa.sa_flags = 0;
	sigaction(2, &sa, NULL);
	while (1)
	{
		printf("Hello world\n");
		sleep(1);
	}
}

Each properties of the struct are function who are called depending on signal number.
If you asking why is it better to use it instead of signal is because there are more features and it's safe when you call it asynchronously

Let's talk aboout sa_flags:
 - SA_RESTART Automatically restart certain system calls if they are interrupted by this signal.
 - SA_NOCLDSTOP: Do not generate SIGCHLD when child processes stop.
 - SA_NOCLDWAIT: Do not transform child processes into zombies when they terminate.
 - SA_NODEFER: Do not block the signal being handled during the execution of the handler.
 - SA_RESETHAND: Reset the signal action to the default upon entry to the signal handler.

If you don't care about flags just put 0

Imagine that you did sigaction(2, &sa, NULL)
When you crtl + c in terminal it will call the print_end_message function and of course print a message
Make sense to free freable things 